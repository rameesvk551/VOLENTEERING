# Docker Compose Configuration
# Purpose: Orchestrate blog microservices (backend, frontend, MongoDB)
# Architecture: As specified in claude.md - independent services with networking

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: nomadic-nook-blog-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: nomadic-nook-blog
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Blog Backend API
  blog-backend:
    build:
      context: ./blog-backend
      dockerfile: Dockerfile
    container_name: nomadic-nook-blog-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/nomadic-nook-blog?authSource=admin
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - blog-network
    volumes:
      - ./blog-backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Blog Frontend
  blog-frontend:
    build:
      context: ./blog-frontend
      dockerfile: Dockerfile
    container_name: nomadic-nook-blog-frontend
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:5000/api}
      VITE_APP_URL: ${VITE_APP_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      - blog-backend
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

networks:
  blog-network:
    driver: bridge
